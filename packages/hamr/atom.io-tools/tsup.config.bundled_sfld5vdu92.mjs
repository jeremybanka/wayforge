// tsup.config.ts
import { defineConfig as defineConfig2 } from "tsup"

// ../../anvl/src/object/entries.ts
var entriesToRecord = (entries) => Object.fromEntries(entries)

// ../tsup.config.ts
import { defineConfig } from "tsup"

// ../__scripts__/discover-submodules.node.ts
import fs from "node:fs"
import path2 from "node:path"

// ../__scripts__/constants.ts
import path from "node:path"
import url from "node:url"
var __injected_import_meta_url__ =
	"file:///Users/jem/dojo/wayforge/packages/hamr/__scripts__/constants.ts"
var FILEPATH = url.fileURLToPath(__injected_import_meta_url__)
var DIRNAME = path.dirname(FILEPATH)
var HAMR_ROOT = path.resolve(DIRNAME, `..`)
var EXCLUDE_LIST = [`node_modules`, `src`, `dist`, `coverage`]
var PACKAGE_JSON_PATH = path.join(HAMR_ROOT, `package.json`)
var TSCONFIG_JSON_PATH = path.join(HAMR_ROOT, `tsconfig.prod.json`)

// ../__scripts__/discover-submodules.node.ts
function discoverSubmodules() {
	const folders = fs
		.readdirSync(HAMR_ROOT, { withFileTypes: true })
		.filter((dirent) => dirent.isDirectory())
		.filter((dirent) => !EXCLUDE_LIST.includes(dirent.name))
		.flatMap((dirent) => {
			const contents = fs.readdirSync(path2.join(HAMR_ROOT, dirent.name))
			const isLeaf = contents.includes(`src`)
			return isLeaf
				? dirent.name
				: contents.map((content) => path2.join(dirent.name, content))
		})
		.filter(
			(folder) =>
				!EXCLUDE_LIST.includes(folder) &&
				!folder.startsWith(`__`) &&
				!folder.endsWith(`__`) &&
				!folder.startsWith(`.`),
		)
	return folders
}

// ../tsup.config.ts
var SUBMODULE_NAMES = discoverSubmodules()
var BUNDLE_EXCLUDE_LIST = [
	`hamr`,
	...SUBMODULE_NAMES.map((submodule) => `hamr/${submodule}`),
	`socket.io`,
	`socket.io-client`,
	`react`,
	`@types/react`,
	`@testing-library/react`,
	`@floating-ui/react`,
	`motion`,
	`happy-dom`,
	`fp-ts`,
]
var BASE_OPTIONS = {
	esbuildOptions: (options) => {
		options.chunkNames = `dist/[name]-[hash]`
		options.assetNames = `dist/[name]-[hash]`
	},
	external: BUNDLE_EXCLUDE_LIST,
	format: [`esm`, `cjs`],
	jsxFactory: `React.createElement`,
	loader: { ".scss": `css` },
	metafile: true,
	sourcemap: true,
	treeshake: true,
	tsconfig: `tsconfig.json`,
}
var DTS_OPTIONS = {
	...BASE_OPTIONS,
	dts: { only: true },
	format: [`esm`],
	entry: [`src/index.ts`],
	metafile: false,
	outDir: `dist`,
}
var JS_OPTIONS = {
	...BASE_OPTIONS,
	clean: false,
	dts: false,
	entry: {
		...entriesToRecord(
			SUBMODULE_NAMES.map((submodule) => [
				`${submodule}/dist/index`,
				`${submodule}/src/index.ts`,
			]),
		),
	},
	outDir: `.`,
}
var tsup_config_default = defineConfig(JS_OPTIONS)

// tsup.config.ts
var tsup_config_default2 = defineConfig2(DTS_OPTIONS)
export { tsup_config_default2 as default }
//# sourceMappingURL=data:application/json;base64,
