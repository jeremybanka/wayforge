import { castToJson } from "atom.io/react-devtools"

describe(`castToJson`, () => {
	it(`should cast data to various json`, () => {
		expect(castToJson({}).array).toEqual([])
		expect(castToJson([]).array).toEqual([])
		expect(castToJson(`__`).array).toEqual([`__`])
		expect(castToJson(2).array).toEqual([null, null])
		expect(castToJson(true).array).toEqual([true])
		expect(castToJson(null).array).toEqual([])
		expect(castToJson(undefined).array).toEqual([])
		expect(castToJson(new Set()).array).toEqual([])
		expect(castToJson(99n / 99n).array).toEqual([])

		expect(castToJson({}).object).toEqual({})
		expect(castToJson([]).object).toEqual({})
		expect(castToJson(`__`).object).toEqual({ __: `__` })
		expect(castToJson(2).object).toEqual({ number: 2 })
		expect(castToJson(true).object).toEqual({ true: true })
		expect(castToJson(null).object).toEqual({})
		expect(castToJson(undefined).object).toEqual({})
		expect(castToJson(new Set()).object).toEqual({})
		expect(castToJson(99n / 99n).object).toEqual({})

		expect(castToJson({ number: 33 }).number).toEqual(33)
		expect(castToJson([``, ``]).number).toEqual(2)
		expect(castToJson(`__`).number).toEqual(Number.NaN)
		expect(castToJson(2).number).toEqual(2)
		expect(castToJson(true).number).toEqual(1)
		expect(castToJson(null).number).toEqual(0)
		expect(castToJson(undefined).number).toEqual(0)
		expect(castToJson(new Set()).number).toEqual(0)
		expect(castToJson(99n / 99n).number).toEqual(0)

		expect(castToJson({ string: `hello` }).string).toEqual(`{"string":"hello"}`)
		expect(castToJson([``, ``]).string).toEqual(`,`)
		expect(castToJson(`__`).string).toEqual(`__`)
		expect(castToJson(2).string).toEqual(`2`)
		expect(castToJson(true).string).toEqual(`true`)
		expect(castToJson(null).string).toEqual(``)
		expect(castToJson(undefined).string).toEqual(``)
		expect(castToJson(new Set()).string).toEqual(``)
		expect(castToJson(99n / 99n).string).toEqual(``)

		expect(castToJson({ true: true }).boolean).toEqual(true)
		expect(castToJson([``, ``]).boolean).toEqual(true)
		expect(castToJson(`__`).boolean).toEqual(false)
		expect(castToJson(2).boolean).toEqual(false)
		expect(castToJson(true).boolean).toEqual(true)
		expect(castToJson(null).boolean).toEqual(false)
		expect(castToJson(undefined).boolean).toEqual(false)
		expect(castToJson(new Set()).boolean).toEqual(false)
		expect(castToJson(99n / 99n).boolean).toEqual(false)

		expect(castToJson({}).null).toBe(null)
		expect(castToJson([]).null).toBe(null)
		expect(castToJson(`__`).null).toBe(null)
		expect(castToJson(1234).null).toBe(null)
		expect(castToJson(true).null).toBe(null)
		expect(castToJson(null).null).toBe(null)
		expect(castToJson(undefined).null).toBe(null)
		expect(castToJson(new Set()).null).toBe(null)
		expect(castToJson(12345678n).null).toBe(null)
	})
})
